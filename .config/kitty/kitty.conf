# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

use_system_wcwidth=no
# background_image /home/taj/Pictures/aurora_car.png
# background_image_layout scaled
cursor_text_color background

tab_bar_background none

#: Fonts {{{

# font_family      Fira Code Retina Nerd Font Complete
# bold_font        Fira Code Bold Nerd Font Complete
# italic_font      MonoLisa Medium Italic
# bold_italic_font Source Code Pro Bold Italic

font_family      Operator Mono Medium
bold_font        Operator Mono Bold
italic_font      Operator Mono Lig Book Italic
bold_italic_font Operator Mono Bold Italic

# font_family      Source Code Pro
# bold_font        Source Code Pro Black
# italic_font      Source Code Pro Italic
# bold_italic_font Source Code Pro Bold Italic

# font_family      Operator Mono Lig Medium
font_size 13.0

#: Font size (in pts)

# adjust_line_height  0
# adjust_column_width 0

# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols

# box_drawing_scale 0.001, 1, 1.5, 2

#: }}}

#: Cursor customization {{{

# cursor magenta
# cursor white

#: Default cursor color

# cursor_shape block

cursor_blink_interval      0
#: }}}

#: Mouse {{{

# url_color #0087BD
# url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

# copy_on_select no

# rectangle_select_modifiers ctrl+alt

# select_by_word_characters :@-./_~?&=%+#

# mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.

# focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around

#: }}}

#: Performance tuning {{{

# sync_to_monitor yes

#: }}}

enable_audio_bell no

#: Window layout {{{

remember_window_size  no
initial_window_width  120c
initial_window_height 33c

enabled_layouts *

# window_resize_step_cells 2
# window_resize_step_lines 2

window_border_width 0

window_margin_width 0

window_padding_width 0

active_border_color #282c34

#: The color for the border of the active window

inactive_border_color #22262d

#: The color for the border of inactive windows

# bell_border_color #ff5a00

#: The color for the border of inactive windows in which a bell has
#: occurred

inactive_text_alpha .6

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

#: }}}

#: Tab bar {{{

tab_bar_margin_width 4

tab_bar_style separator

#: The tab bar style, can be one of: fade or separator. In the fade
#: style, each tab's edges fade into the background color, in the
#: separator style, tabs are separated by a configurable separator.

# tab_fade 0.25 0.5 0.75 1
# tab_fade 1 1 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

tab_separator "    "
tab_title_template "{index}"

active_tab_foreground   #986fec
active_tab_background   #1e1e1e
active_tab_font_style   bold
inactive_tab_foreground #999999
inactive_tab_background #1e1e1e
inactive_tab_font_style normal

#: }}}

#: Color scheme {{{

foreground #d8dee9
background #1e1e1e

#: The foreground and background colors

background_opacity         0.1
# dynamic_background_opacity no

#: The opacity of the background. A number between 0 and 1, where 1 is
#: opaque and 0 is fully transparent.  This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the default background color's
#: opacity. This is so that things like the status bar in vim,
#: powerline prompts, etc. still look good.  But it means that if you
#: use a color theme with a background color in your editor, it will
#: not be rendered as transparent.  Instead you should change the
#: default background color in your kitty config and not use a
#: background color in the editor color scheme. Or use the escape
#: codes to set the terminals default colors in a shell script to
#: launch your editor.  Be aware that using a value less than 1.0 is a
#: (possibly significant) performance hit.  If you want to dynamically
#: change transparency of windows set dynamic_background_opacity to
#: yes (this is off by default as it has a performance cost)

# dim_opacity 0.75

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).

# selection_foreground #000000
# selection_background #FFFACD

#: The foreground and background for text selected with the mouse


#: The 16 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version. You can also set the remaining colors from
#: the 256 color table as color16 to color255.

color0 #282c34
color8 #596276

#: black

color1 #d54646
color9 #d54646

#: red

color2  #23d18b
color10 #23d18b

#: green

color3  #d7ba7d
color11 #d7ba7d

#: yellow

color4  #569cd6
color12 #569cd6

#: blue

color5  #c678dd
color13 #c678dd

#: magenta

color6  #29b8db
color14 #29b8db

#: cyan

color7  #eceff4
color15 #abb2bf

#: white

#: }}}

editor nvim
# term xterm-kitty


#: Clipboard {{{
    
# map cmd+c        copy_to_clipboard
# map kitty_mod+c  copy_to_clipboard
# map cmd+v        paste_from_clipboard
# map kitty_mod+v  paste_from_clipboard
# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection
# map kitty_mod+o  pass_selection_to_program

#:     map kitty_mod+o pass_selection_to_program firefox

#:     map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

# map kitty_mod+up        scroll_line_up
# map kitty_mod+k         scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+j         scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map kitty_mod+page_down scroll_page_down
map kitty_mod+b   scroll_page_up
map kitty_mod+f   scroll_page_down
# map kitty_mod+home      scroll_home
# map kitty_mod+end       scroll_end
# map kitty_mod+h         show_scrollback

#: You can send the contents of the current screen + history buffer as
#: stdin to an arbitrary program using the placeholders @text (which
#: is the plain text) and @ansi (which includes text styling escape
#: codes). For only the current screen, use @screen or @ansi_screen.
#: For example, the following command opens the scrollback buffer in
#: less in a new window::

#:     map kitty_mod+y new_window @ansi less +G -R

#: }}}

#: Window management {{{

# map kitty_mod+enter new_window
map kitty_mod+enter no_op
map kitty_mod+enter new_window_with_cwd

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      new_window mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    new_window_with_cwd

# map cmd+n       new_os_window
# map kitty_mod+n new_os_window
# map kitty_mod+w close_window
# map kitty_mod+] next_window
# map kitty_mod+[ previous_window
map kitty_mod+j previous_window
map kitty_mod+k next_window
map kitty_mod+up move_window_forward
map kitty_mod+down move_window_backward
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
# map kitty_mod+1 first_window
# map kitty_mod+2 second_window
# map kitty_mod+3 third_window
# map kitty_mod+4 fourth_window
# map kitty_mod+5 fifth_window
# map kitty_mod+6 sixth_window
# map kitty_mod+7 seventh_window
# map kitty_mod+8 eighth_window
# map kitty_mod+9 ninth_window
# map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{

map kitty_mod+right next_tab
map kitty_mod+left  previous_tab
map kitty_mod+]       no_op
# map kitty_mod+]       next_tab
map kitty_mod+[       no_op
# map kitty_mod+[       previous_tab
# map kitty_mod+t     new_tab
# map kitty_mod+q     close_tab
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward
# map kitty_mod+alt+t set_tab_title
map kitty_mod+t       no_op
map kitty_mod+t       new_tab_with_cwd

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd.
#: }}}

#: Layout management {{{

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

map kitty_mod+0 no_op
map kitty_mod+0 goto_layout stack
map kitty_mod+9 no_op
map kitty_mod+9 goto_layout tall
map kitty_mod+8 no_op
map kitty_mod+8 goto_layout fat
#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty windows at a
#: time or only the current one.

map kitty_mod+equal     change_font_size all +2.0
map kitty_mod+minus     change_font_size all -2.0
map kitty_mod+backspace change_font_size all 0

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current window's font size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

# map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{


# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+u      input_unicode_character
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m set_background_opacity +0.1
# map kitty_mod+a>l set_background_opacity -0.1
# map kitty_mod+a>1 set_background_opacity 1
# map kitty_mod+a>d set_background_opacity default

#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

map ctrl+space send_text all \x10

# }}}
